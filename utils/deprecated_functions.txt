    def old_qpIK(self,max_iterations=100,dt=100,precision=0.00001):
        data_in = super().to_numpy(self.kps)
        mask = ~np.isnan(data_in)
        
        nkey = np.sum(mask[:,0])
        key = str(np.sum(mask[:,0]))+"."
                    
        problem_to_build = False if key in self.qpIK_problems.keys() else True
                    
        subset_joints = [self.joints[i] for i in range(len(self.joints)) if mask[i,0]]
        
        x_target = data_in[mask].reshape(1,-1).squeeze()
        
        if problem_to_build:        
            self.q = cp.Parameter((49,))
            self.x = cp.Parameter((nkey*3,))
            self.J = cp.Parameter((nkey*3,49))
            self.x_target = cp.Parameter((nkey*3,))
            self.delta = cp.Variable((nkey*3,))
            self.dq = cp.Variable((49,))
            self.constraints = [self.x + self.J@self.dq == self.x_target + self.delta]  
            # self.constraints += [-self.dq[6:] >= -1*(self.q_u[6:]-self.q[6:]), self.dq[6:] >= -1*(self.q[6:]-self.q_l[6:])]
            self.constraints += [-self.dq >= -1*(self.q_u-self.q), self.dq >= -1*(self.q-self.q_l)]
            self.dq_prev = cp.Parameter((49,))

            # Velocity constraints
            self.dq_l = cp.Parameter((49,))
            self.dq_u = cp.Parameter((49,))
            # self.constraints += [self.dq_prev[6:] + self.dq[6:] >= self.dq_l[6:], self.dq_prev[6:] + self.dq[6:] <= self.dq_u[6:]]
            self.constraints += [self.dq_prev + self.dq >= self.dq_l, self.dq_prev + self.dq <= self.dq_u]
            self.obj = cp.Minimize( cp.quad_form(self.delta,np.eye(self.delta.shape[0])) + cp.quad_form(self.dq,np.eye(self.dq.shape[0])) )
            self.prob = cp.Problem(self.obj, self.constraints)
            self.qpIK_problems[key] = {"problem": self.prob, 
                                                   "x_target":self.x_target,
                                                   "x" : self.x,
                                                   "J" : self.J,
                                                   "delta" : self.delta,
                                                   "dq_l" : self.dq_l,
                                                   "dq_u" : self.dq_u,
                                                   "dq_prev" : self.dq_prev,
                                                   "dq" : self.dq,
                                                   "q" : self.q
                                                   }
        else:
            self.prob = self.qpIK_problems[key]["problem"]
            self.x_target = self.qpIK_problems[key]["x_target"]
            self.x = self.qpIK_problems[key]["x"]
            self.J = self.qpIK_problems[key]["J"]
            self.delta = self.qpIK_problems[key]["delta"]
            self.dq_l = self.qpIK_problems[key]["dq_l"]
            self.dq_u = self.qpIK_problems[key]["dq_u"]
            self.dq_prev = self.qpIK_problems[key]["dq_prev"]
            self.dq = self.qpIK_problems[key]["dq"] 
            self.q = self.qpIK_problems[key]["q"]
        self.dq_l.value = dt*self.qdot_l
        self.dq_u.value = dt*self.qdot_u
        self.dq_prev.value = np.zeros(self.q.shape)
        self.x_target.value = x_target
        
                
        older_loss = np.inf
        i=0
        while i < max_iterations:
            self.q.value = self._nimble.getPositions()
            x = self.correct(np.array(self._nimble.getJointWorldPositions(self.joints)))
            J = self._nimble.getJointWorldPositionsJacobianWrtJointPositions(self.joints)
            self.J.value = J[mask.reshape(1,-1).squeeze(),:]
            self.x.value = x[mask.reshape(1,-1).squeeze()]
            
            error = self.x.value - self.x_target.value
            loss = np.inner(error, error)
            if np.abs(older_loss - loss) < precision:
                break
            older_loss = loss
            
            # self.prob.solve(solver=cp.ECOS)
            self.prob.solve(solver=cp.OSQP)
            # print(i,self.prob.status,type(self.dq.value))
            self.dq_prev.value += np.array(self.dq.value)
            self._nimble.setPositions(self.q.value+self.dq.value) # *0.01
            
            i+=1


    def qpIK2D(self,kps2d,K,max_iterations=100000,dt=0.02,precision=0.00001):
        
        # kps2d is a list of matrices of size (|kps|,2)
        mask = ~np.isnan(kps2d)
        
        nkey = np.sum(mask[:,0])
                
        key=str(nkey)+"."
                
        problem_to_build = False if key in self.qpIK_problems.keys() else True
            
        subsets_joints = []
        
        subsets_joints.append([self.joints[i] for i in range(len(self.joints)) if mask[i,0]])
                
        if np.all(self._nimble.getPositions() == self.neutral_position):
            dt = 100
                
        # Every time set a new problem. It's slower but can be improved
        if problem_to_build:
            # Variables
            self.deltas =  cp.Variable((nkey*3,1))
            self.dq = cp.Variable((49,1))
            self.z =  cp.Variable((nkey*3,1),nonneg=True)
            # Parameters            
            self.q = cp.Parameter((49,1))
            self.xs = cp.Parameter((nkey*3,1))
            self.Js = cp.Parameter((nkey*3,49))
            self.dq_prev = cp.Parameter((49,1))
            self.dq_l = cp.Parameter((49,1))
            self.dq_u = cp.Parameter((49,1))
            self.A = cp.Parameter((nkey*3,1))
            # Constraints
            self.constraints = []
            
            for i in range(0,nkey,3):
                self.constraints += [self.z[i] == self.z[i+1], self.z[i] == self.z[i+2]]
            
            self.constraints += [self.xs + self.Js@self.dq == cp.multiply(self.A,self.z) + self.deltas]
            
            self.constraints += [z <= 10 for z in self.z]
            self.constraints += [z >= 1 for z in self.z]
            
            self.constraints += [-self.dq >= -1*(self.q_u.reshape(49,1)-self.q), self.dq >= -1*(self.q-self.q_l.reshape(49,1))]
            self.constraints += [self.dq_prev + self.dq >= self.dq_l, self.dq_prev + self.dq <= self.dq_u]
            
            # Problem
            to_minimize = cp.quad_form(self.dq,np.eye(self.dq.shape[0]))
            to_minimize += cp.quad_form(self.deltas,np.eye(self.deltas.shape[0]))
            # to_minimize += cp.quad_form(cp.multiply(-1,self.z),np.eye(self.z.shape[0]))
            # to_minimize += cp.quad_form(self.z,np.eye(self.z.shape[0]))
            
            self.obj = cp.Minimize(to_minimize)
            
            # self.obj +=
            
            self.prob = cp.Problem(self.obj, self.constraints)
            self.qpIK_problems[key] = {"problem": self.prob, 
                                        #    "x_targets":self.x_targets,
                                        "xs" : self.xs,
                                        "Js" : self.Js,
                                        "deltas" : self.deltas,
                                        "dq_l" : self.dq_l,
                                        "dq_u" : self.dq_u,
                                        "dq_prev" : self.dq_prev,
                                        "dq" : self.dq,
                                        "q" : self.q,
                                        "z" : self.z,
                                        "A" : self.A,
                                            }
        else:
            self.prob = self.qpIK_problems[key]["problem"]
            self.xs = self.qpIK_problems[key]["xs"]
            self.Js = self.qpIK_problems[key]["Js"]
            self.deltas = self.qpIK_problems[key]["deltas"]
            self.dq_l = self.qpIK_problems[key]["dq_l"]
            self.dq_u = self.qpIK_problems[key]["dq_u"]
            self.dq_prev = self.qpIK_problems[key]["dq_prev"]
            self.dq = self.qpIK_problems[key]["dq"]
            self.q = self.qpIK_problems[key]["q"]
            self.z = self.qpIK_problems[key]["z"]
            self.A = self.qpIK_problems[key]["A"]
                
        self.dq_l.value = dt*self.qdot_l.reshape(49,1)
        self.dq_u.value = dt*self.qdot_u.reshape(49,1)
        self.dq_prev.value = np.zeros(self.q.shape)

        U = np.hstack([kps2d,np.ones((kps2d.shape[0],1))]).reshape(-1,1)
        C = np.tile(np.array([K[0,2],K[1,2],0]),kps2d.shape[0]).reshape(-1,1)
        F = np.tile(np.array([K[0,0],K[1,1],1]),kps2d.shape[0]).reshape(-1,1)

        self.A.value = (U-C)/F
                
        # older_loss = np.inf
        i = 0
        while i < max_iterations:
            self.q.value = self._nimble.getPositions().reshape(49,1)
            self.xs.value = self.correct(np.array(self._nimble.getJointWorldPositions(self.joints))).reshape(3*nkey,1)
            self.Js.value = self._nimble.getJointWorldPositionsJacobianWrtJointPositions(self.joints)
                        
            self.prob.solve(solver=cp.OSQP, warm_start=True)
            # print(i,self.prob.status,type(self.dq.value))
            # print(self.z.value)
            self.dq_prev.value += np.array(self.dq.value)
            self._nimble.setPositions(self.q.value+self.dq.value) # *0.01
            i+=1
    
    
    def qpIK2Dw(self,kps2d,K,R,T,max_iterations=100000,dt=0.02,precision=0.00001):
        
        # kps2d is a list of matrices of size (|kps|,2)
        mask = ~np.isnan(kps2d)
        
        nkey = np.sum(mask[:,0])
                
        key=str(nkey)+"."
                
        problem_to_build = False if key in self.qpIK_problems.keys() else True
            
        subsets_joints = []
        
        subsets_joints.append([self.joints[i] for i in range(len(self.joints)) if mask[i,0]])
                
        if np.all(self._nimble.getPositions() == self.neutral_position):
            dt = 100
                
        # Every time set a new problem. It's slower but can be improved
        if problem_to_build:
            # Variables
            self.deltas =  cp.Variable((nkey*3,1))
            self.dq = cp.Variable((49,1))
            self.z =  cp.Variable((nkey*3,1),nonneg=True)
            # Parameters            
            self.q = cp.Parameter((49,1))
            self.xs = cp.Parameter((nkey*3,1))
            self.Js = cp.Parameter((nkey*3,49))
            self.dq_prev = cp.Parameter((49,1))
            self.dq_l = cp.Parameter((49,1))
            self.dq_u = cp.Parameter((49,1))
            self.A = cp.Parameter((nkey*3,1))
            # self.R = cp.Parameter((nkey*3, nkey*3))
            # self.T = cp.Parameter((nkey*3,1))
            self.T = np.tile(T.reshape(1,-1),nkey).reshape(-1,1)
            # print(self.T.value)
            
            R_e = np.zeros((3*nkey, 3*nkey))
            # Place the 3x3 matrix on the diagonal
            for i in range(nkey):
                R_e[i*3:(i+1)*3, i*3:(i+1)*3] = R
            self.R = R_e
            # Constraints
            self.constraints = []
            
            for i in range(0,nkey,3):
                self.constraints += [self.z[i] == self.z[i+1], self.z[i] == self.z[i+2]]
            
            self.constraints += [self.xs + self.Js@self.dq == self.R@cp.multiply(self.A,self.z) + self.T + self.deltas]
            
            self.constraints += [z <= 10 for z in self.z]
            self.constraints += [z >= 1 for z in self.z]
            
            # self.constraints += [self.xs[i] + self.Js[i]@self.dq == self.x_targets[i] + self.deltas[i] for i in range(len(masks))]
            self.constraints += [-self.dq >= -1*(self.q_u.reshape(49,1)-self.q), self.dq >= -1*(self.q-self.q_l.reshape(49,1))]
            self.constraints += [self.dq_prev + self.dq >= self.dq_l, self.dq_prev + self.dq <= self.dq_u]
            
            # Problem
            to_minimize = cp.quad_form(self.dq,np.eye(self.dq.shape[0]))
            to_minimize += cp.quad_form(self.deltas,np.eye(self.deltas.shape[0]))
            # to_minimize += cp.quad_form(self.z,np.eye(self.z.shape[0]))
            
            self.obj = cp.Minimize(to_minimize)
            self.prob = cp.Problem(self.obj, self.constraints)
            self.qpIK_problems[key] = {"problem": self.prob, 
                                        #    "x_targets":self.x_targets,
                                        "xs" : self.xs,
                                        "Js" : self.Js,
                                        "deltas" : self.deltas,
                                        "dq_l" : self.dq_l,
                                        "dq_u" : self.dq_u,
                                        "dq_prev" : self.dq_prev,
                                        "dq" : self.dq,
                                        "q" : self.q,
                                        "z" : self.z,
                                        "A" : self.A,
                                        "R" : self.R,
                                        "T" : self.T,
                                            }
        else:
            # print(self.qpIK_problems[key].keys())
            self.prob = self.qpIK_problems[key]["problem"]
            self.xs = self.qpIK_problems[key]["xs"]
            self.Js = self.qpIK_problems[key]["Js"]
            self.deltas = self.qpIK_problems[key]["deltas"]
            self.dq_l = self.qpIK_problems[key]["dq_l"]
            self.dq_u = self.qpIK_problems[key]["dq_u"]
            self.dq_prev = self.qpIK_problems[key]["dq_prev"]
            self.dq = self.qpIK_problems[key]["dq"]
            self.q = self.qpIK_problems[key]["q"]
            self.z = self.qpIK_problems[key]["z"]
            self.A = self.qpIK_problems[key]["A"]
            self.R = self.qpIK_problems[key]["R"]
            self.T = self.qpIK_problems[key]["T"]
                
        self.dq_l.value = dt*self.qdot_l.reshape(49,1)
        self.dq_u.value = dt*self.qdot_u.reshape(49,1)
        self.dq_prev.value = np.zeros(self.q.shape)

        U = np.hstack([kps2d,np.ones((nkey,1))]).reshape(-1,1)
        C = np.tile(np.array([K[0,2],K[1,2],0]),nkey).reshape(-1,1)
        F = np.tile(np.array([K[0,0],K[1,1],1]),nkey).reshape(-1,1)

        self.A.value = (U-C)/F
                
        # older_loss = np.inf
        i = 0
        while i < max_iterations:
            self.q.value = self._nimble.getPositions().reshape(49,1)
            self.xs.value = self.correct(np.array(self._nimble.getJointWorldPositions(self.joints))).reshape(3*nkey,1)
            # print(self.xs.value.reshape(-1,3))
            self.Js.value = self._nimble.getJointWorldPositionsJacobianWrtJointPositions(self.joints)
                        
            self.prob.solve(warm_start=True,solver=cp.OSQP) #, warm_start=True,solver=cp.ECOS  verbose=True
            # print(i,self.prob.status,type(self.dq.value))
            # sol = self.R.value@(self.A.value*self.z.value) + self.T.value
            # print(sol.reshape(-1,3))
            # print("z:",self.z.value)
                        
            # if self.prob.status != "optimal":
            #     return
            
            # print(self.z.value)
            self.dq_prev.value += np.array(self.dq.value)
            self._nimble.setPositions(self.q.value+self.dq.value) # *0.01
            i+=1
    
    def multisource_qpIK2D(self,kps2ds,Ks,Rs,Ts,camera_names,max_iterations=100000,dt=0.02,precision=0.00001):
        
        # kps2d is a list of matrices of size (|kps|,2)
        masks = [~np.isnan(kps2d) for kps2d in kps2ds]
        
        nkeys = [np.sum(mask[:,0]) for mask in masks]
                
        key=".".join([str(c) for c in camera_names])+"."
                
        for k in nkeys:
            key+=str(k)+"."
        
        problem_to_build = False if key in self.qpIK_problems.keys() else True
            
        subsets_joints = []
        for mask in masks:
            subsets_joints.append([self.joints[i] for i in range(len(self.joints)) if mask[i,0]])
           
        if np.all(self._nimble.getPositions() == self.neutral_position):
            dt = 100
        
        # Every time set a new problem. It's slower but can be improved
        if problem_to_build:
            # Variables
            self.deltas =  [cp.Variable((nkey*3,1)) for nkey in nkeys]
            self.dq = cp.Variable((49,1))
            self.z =  [cp.Variable((nkey*3,1),nonneg=True) for nkey in nkeys]
            # Parameters            
            self.q = cp.Parameter((49,1))
            self.xs = [cp.Parameter((nkey*3,1)) for nkey in nkeys]
            self.Js = [cp.Parameter((nkey*3,49)) for nkey in nkeys]
            self.dq_prev = cp.Parameter((49,1))
            self.dq_l = cp.Parameter((49,1))
            self.dq_u = cp.Parameter((49,1))
            self.A = [cp.Parameter((nkey*3,1)) for nkey in nkeys]
            # self.R = cp.Parameter((nkey*3, nkey*3))
            # self.T = cp.Parameter((nkey*3,1))
            self.T = [np.tile(Ts[j].reshape(1,-1),nkey).reshape(-1,1) for j,nkey in enumerate(nkeys)]
            # print(self.T.value)
            
            R_es = [np.zeros((3*nkey, 3*nkey)) for nkey in nkeys]
            # Place the 3x3 matrix on the diagonal
            for j, nkey in enumerate(nkeys):
                for i in range(nkey):
                    R_es[j][i*3:(i+1)*3, i*3:(i+1)*3] = Rs[j]
            self.R = [R_e for R_e in R_es]
            # Constraints
            self.constraints = []
            
            for j, nkey in enumerate(nkeys):
                for i in range(0,nkey,3):
                    self.constraints += [self.z[j][i] == self.z[j][i+1], self.z[j][i] == self.z[j][i+2]]
            
                self.constraints += [self.xs[j] + self.Js[j]@self.dq == self.R[j]@cp.multiply(self.A[j],self.z[j]) + self.T[j] + self.deltas[j]]
            
                self.constraints += [z <= 10 for z in self.z[j]]
                self.constraints += [z >= 1 for z in self.z[j]]
            
            self.constraints += [-self.dq >= -1*(self.q_u.reshape(49,1)-self.q), self.dq >= -1*(self.q-self.q_l.reshape(49,1))]
            self.constraints += [self.dq_prev + self.dq >= self.dq_l, self.dq_prev + self.dq <= self.dq_u]
            
            # Problem
            to_minimize = cp.quad_form(self.dq,np.eye(self.dq.shape[0]))
            for j, nkey in enumerate(nkeys):
                to_minimize += cp.quad_form(self.deltas[j],np.eye(self.deltas[j].shape[0]))
                # # to_minimize += cp.quad_form(self.z[j],np.eye(self.z[j].shape[0]))
            
            self.obj = cp.Minimize(to_minimize)
            self.prob = cp.Problem(self.obj, self.constraints)
            self.qpIK_problems[key] = {"problem": self.prob, 
                                        #    "x_targets":self.x_targets,
                                        "xs" : self.xs,
                                        "Js" : self.Js,
                                        "deltas" : self.deltas,
                                        "dq_l" : self.dq_l,
                                        "dq_u" : self.dq_u,
                                        "dq_prev" : self.dq_prev,
                                        "dq" : self.dq,
                                        "q" : self.q,
                                        "z" : self.z,
                                        "A" : self.A,
                                        "R" : self.R,
                                        "T" : self.T,
                                            }
        else:
            # print(self.qpIK_problems[key].keys())
            self.prob = self.qpIK_problems[key]["problem"]
            self.xs = self.qpIK_problems[key]["xs"]
            self.Js = self.qpIK_problems[key]["Js"]
            self.deltas = self.qpIK_problems[key]["deltas"]
            self.dq_l = self.qpIK_problems[key]["dq_l"]
            self.dq_u = self.qpIK_problems[key]["dq_u"]
            self.dq_prev = self.qpIK_problems[key]["dq_prev"]
            self.dq = self.qpIK_problems[key]["dq"]
            self.q = self.qpIK_problems[key]["q"]
            self.z = self.qpIK_problems[key]["z"]
            self.A = self.qpIK_problems[key]["A"]
            self.R = self.qpIK_problems[key]["R"]
            self.T = self.qpIK_problems[key]["T"]
                
        self.dq_l.value = dt*self.qdot_l.reshape(49,1)
        self.dq_u.value = dt*self.qdot_u.reshape(49,1)
        self.dq_prev.value = np.zeros(self.q.shape)

        U = [np.hstack([kps2ds[j],np.ones((nkey,1))]).reshape(-1,1) for j,nkey in enumerate(nkeys)]
        C = [np.tile(np.array([Ks[j][0,2],Ks[j][1,2],0]),nkey).reshape(-1,1) for j,nkey in enumerate(nkeys)]
        F = [np.tile(np.array([Ks[j][0,0],Ks[j][1,1],1]),nkey).reshape(-1,1) for j,nkey in enumerate(nkeys)]

        for j,_ in enumerate(nkeys):
            self.A[j].value = (U[j]-C[j])/F[j]
                
        # older_loss = np.inf
        i = 0
        while i < max_iterations:
            self.q.value = self._nimble.getPositions().reshape(49,1)
            xs = self.correct(np.array(self._nimble.getJointWorldPositions(self.joints))).reshape(3*len(self.joints),1)
            # print(self.xs.value.reshape(-1,3))
            J = self._nimble.getJointWorldPositionsJacobianWrtJointPositions(self.joints)
            
            for j in range(len(nkeys)):
                mask3d = np.tile(masks[j][:,1].reshape(-1,1), (3, 1)).squeeze()
                # print(mask[j],mask3d)
                self.Js[j].value = J[mask3d,:]
                self.xs[j].value = xs[mask3d]
            
            self.prob.solve(warm_start=True,solver=cp.OSQP) #, warm_start=True,solver=cp.ECOS  verbose=True
            # print(i,self.prob.status,type(self.dq.value))
            # sol = self.R.value@(self.A.value*self.z.value) + self.T.value
            # print(sol.reshape(-1,3))
            # print("z:",self.z.value)
                        
            # if self.prob.status != "optimal":
            #     return
            
            # print(self.z.value)
            self.dq_prev.value += np.array(self.dq.value)
            self._nimble.setPositions(self.q.value+self.dq.value) # *0.01
            i+=1


# Old scaling version, only for precise input (e.g., marker-based)
def scale(self):
    scale =  self._nimble.getBodyScales().reshape(-1,3)
    # If there may be error is the height and bones estimation, return the mean of the previous
    if np.all(np.isnan(self.height_history)):
        return
    h = np.nanmean(self.height_history)
    for i,b in enumerate(self.body_dict.keys()):
        if self.body_dict[b] == 'Core' or self.body_dict[b] == '':
            scale[i,:] = h / self.skeleton_from_nimble.estimate_height()
        else:
            sc = np.nanmean(self.bones_dict[self.body_dict[b]].history) / self.skeleton_from_nimble.bones_dict[self.body_dict[b]].length
            if np.isnan(sc) and self.body_dict[b] in self.symmetry:
                sc = np.nanmean(self.bones_dict[self.symmetry[self.body_dict[b]]].history) / self.skeleton_from_nimble.bones_dict[self.symmetry[self.body_dict[b]]].length
            if not np.isnan(sc):
                scale[i,:] = sc
    # print(np.round(scale[:,0].transpose(),2))
    self._nimble.setBodyScales(scale.reshape(-1,1))